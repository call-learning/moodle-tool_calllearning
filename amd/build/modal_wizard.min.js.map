{"version":3,"file":"modal_wizard.min.js","sources":["../src/modal_wizard.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * General modal wizard.\n *\n * @module     tool_calllearning/modal_wizard\n * @copyright  2025 Laurent David <laurent@call-learning.fr>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Modal from 'core/modal';\nimport Notification from 'core/notification';\nimport * as CustomEvents from 'core/custom_interaction_events';\nimport $ from 'jquery';\nimport WizardRepository from './wizard_repository';\n/**\n * ModalWizard class\n */\nexport default class ModalWizard extends Modal {\n    static TYPE = 'WIZARD';\n    static TEMPLATE = 'tool_calllearning/modal_wizard';\n    static EVENTS = {\n        next: 'modal-wizard:next',\n        previous: 'modal-wizard:previous',\n    };\n\n    wizardUniqueId = null;\n    /**\n     * Constructor\n     *\n     * Shows the required form inside a modal dialogue\n     *\n     * @param {HTMLElement} root The root element of the modal.\n     */\n    constructor(root) {\n        super(root);\n        this.removeOnClose = true; // Default to removing the modal on close.\n        if (!this.getFooter().find(this.getActionSelector('cancel')).length) {\n            Notification.exception({message: 'No cancel button found'});\n        }\n    }\n\n\n    /**\n     * Configure the modal.\n     *\n     * @param {ModalConfig} param0 The configuration options\n     */\n    configure(param0 = {}) {\n        super.configure(param0);\n        const {wizardUniqueId = null} = param0;\n        this.wizardUniqueId = wizardUniqueId;\n        if (!this.wizardUniqueId) {\n            Notification.exception({message: 'No wizardUniqueId provided'});\n        }\n    }\n    /**\n     * Register all event listeners.\n     */\n    registerEventListeners() {\n        // Call the parent registration.\n        super.registerEventListeners();\n\n        // Register to close on save/cancel.\n        this.registerCloseOnSave();\n        this.registerCloseOnCancel();\n        this.registerEventNext();\n        this.registerEventPrevious();\n    }\n\n    /**\n     * Register a listener to update the content when next button is pressed.\n     *\n     * @method registerEventNext\n     */\n    registerEventNext() {\n        // Handle the clicking of the Cancel button.\n        this.getModal().on(CustomEvents.events.activate, this.getActionSelector('next'), (e, data) => {\n            const nextEvent = new CustomEvent(ModalWizard.EVENTS.next, {detail: this});\n            this.getRoot().trigger(nextEvent, this);\n            if (!nextEvent.isDefaultPrevented()) {\n                data.originalEvent.preventDefault();\n\n            }\n        });\n    }\n\n    /**\n     * Register a listener update the content when previous button is pressed.\n     *\n     * @method registerEventPrevious\n     */\n    registerEventPrevious() {\n        // Handle the clicking of the Cancel button.\n        this.getModal().on(CustomEvents.events.activate, this.getActionSelector('previous'), (e, data) => {\n            const previousEvent = new CustomEvent(ModalWizard.EVENTS.previous, {detail: this});\n            this.getRoot().trigger(previousEvent, this);\n            if (!previousEvent.isDefaultPrevented()) {\n                data.originalEvent.preventDefault();\n            }\n        });\n    }\n\n    /**\n     * Load content dynamically for the wizard step.\n     *\n     * @param {String} stepId The ID of the step to load.\n     */\n    loadStepContent(stepId) {\n        const params = {\n            stepid: stepId,\n            wizardid: this.wizardUniqueId\n        };\n\n        $.ajax({\n            url: M.cfg.wwwroot + '/admin/tool/calllearning/wizard/stepcontent.php',\n            method: 'POST',\n            data: params,\n            success: (response) => {\n                if (response.type === 'form') {\n                    this.setFormContent(response.html);\n                } else {\n                    this.setNonInteractiveContent(response.html);\n                }\n            },\n            error: () => {\n                Notification.alert('Error', 'Failed to load step content.', '');\n            }\n        });\n    }\n\n    /**\n     * Set the content for a form step.\n     *\n     * @param {String} html The HTML content of the form.\n     */\n    setFormContent(html) {\n        const bodyContent = Promise.resolve({html: html});\n        this.getModal().setBodyContent(bodyContent);\n\n        // Attach form validation logic.\n        this.getModal().getRoot().on('submit', 'form', (e) => {\n            e.preventDefault();\n            if (this.validateForm()) {\n                this.submitFormAjax();\n            }\n        });\n    }\n\n    /**\n     * Set the content for a non-interactive step.\n     *\n     * @param {String} html The HTML content.\n     */\n    setNonInteractiveContent(html) {\n        const bodyContent = Promise.resolve({html: html});\n        this.getModal().setBodyContent(bodyContent);\n    }\n\n    /**\n     * Submit the form via the WizardRepository's submitDynamicForm method.\n     */\n    async submitFormAjax() {\n        // Validate form elements before submission.\n        if (!this.validateForm()) {\n            Notification.alert('Validation Error', 'Please correct the errors in the form.', '');\n            return;\n        }\n\n        // Disable buttons during submission.\n        this.disableButtons();\n\n        // Serialize form data.\n        const form = this.getModal().getRoot().find('form');\n        const formData = form.serialize();\n\n        // Use the WizardRepository to submit the form.\n        WizardRepository.submitDynamicForm({\n            formdata: formData,\n            form: 'form_wizard'\n        })\n        .then((response) => {\n            if (response.error) {\n                // Handle server-side validation errors.\n                this.setFormContent(response.exception.message);\n                this.enableButtons();\n            } else if (!response.data.submitted) {\n                // Reload the form with validation errors.\n                this.setFormContent(response.data.html);\n                this.enableButtons();\n            } else {\n                // Form submitted successfully, proceed to the next step.\n                this.loadStepContent(response.data.nextstep);\n            }\n        })\n        .catch((exception) => {\n            Notification.exception(exception);\n            this.enableButtons();\n        });\n    }\n\n    /**\n     * Validate form elements.\n     *\n     * @return {Boolean} Whether client-side validation has passed.\n     */\n    validateForm() {\n        const invalid = this.getModal().getRoot().find('[aria-invalid=\"true\"], .error');\n        if (invalid.length) {\n            invalid.first().focus();\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Disable buttons during form submission.\n     */\n    disableButtons() {\n        this.getModal().getFooter().find('[data-action]').attr('disabled', true);\n    }\n\n    /**\n     * Enable buttons after form submission (on validation error).\n     */\n    enableButtons() {\n        this.getModal().getFooter().find('[data-action]').removeAttr('disabled');\n    }\n}\n\nModalWizard.registerModalType();\n"],"names":["ModalWizard","Modal","constructor","root","removeOnClose","this","getFooter","find","getActionSelector","length","exception","message","configure","param0","wizardUniqueId","registerEventListeners","registerCloseOnSave","registerCloseOnCancel","registerEventNext","registerEventPrevious","getModal","on","CustomEvents","events","activate","e","data","nextEvent","CustomEvent","EVENTS","next","detail","getRoot","trigger","isDefaultPrevented","originalEvent","preventDefault","previousEvent","previous","loadStepContent","stepId","params","stepid","wizardid","ajax","url","M","cfg","wwwroot","method","success","response","type","setFormContent","html","setNonInteractiveContent","error","alert","bodyContent","Promise","resolve","setBodyContent","validateForm","submitFormAjax","disableButtons","formData","serialize","submitDynamicForm","formdata","form","then","enableButtons","submitted","nextstep","catch","invalid","first","focus","attr","removeAttr","registerModalType"],"mappings":"6qDA+BqBA,oBAAoBC,eAgBrCC,YAAYC,YACFA,4CATO,WAURC,eAAgB,EAChBC,KAAKC,YAAYC,KAAKF,KAAKG,kBAAkB,WAAWC,8BAC5CC,UAAU,CAACC,QAAS,2BAUzCC,gBAAUC,8DAAS,SACTD,UAAUC,cACVC,eAACA,eAAiB,MAAQD,YAC3BC,eAAiBA,eACjBT,KAAKS,sCACOJ,UAAU,CAACC,QAAS,+BAMzCI,+BAEUA,8BAGDC,2BACAC,6BACAC,yBACAC,wBAQTD,yBAESE,WAAWC,GAAGC,aAAaC,OAAOC,SAAUnB,KAAKG,kBAAkB,SAAS,CAACiB,EAAGC,cAC3EC,UAAY,IAAIC,YAAY5B,YAAY6B,OAAOC,KAAM,CAACC,OAAQ1B,YAC/D2B,UAAUC,QAAQN,UAAWtB,MAC7BsB,UAAUO,sBACXR,KAAKS,cAAcC,oBAW/BjB,6BAESC,WAAWC,GAAGC,aAAaC,OAAOC,SAAUnB,KAAKG,kBAAkB,aAAa,CAACiB,EAAGC,cAC/EW,cAAgB,IAAIT,YAAY5B,YAAY6B,OAAOS,SAAU,CAACP,OAAQ1B,YACvE2B,UAAUC,QAAQI,cAAehC,MACjCgC,cAAcH,sBACfR,KAAKS,cAAcC,oBAU/BG,gBAAgBC,cACNC,OAAS,CACXC,OAAQF,OACRG,SAAUtC,KAAKS,gCAGjB8B,KAAK,CACHC,IAAKC,EAAEC,IAAIC,QAAU,kDACrBC,OAAQ,OACRvB,KAAMe,OACNS,QAAUC,WACgB,SAAlBA,SAASC,UACJC,eAAeF,SAASG,WAExBC,yBAAyBJ,SAASG,OAG/CE,MAAO,2BACUC,MAAM,QAAS,+BAAgC,OAUxEJ,eAAeC,YACLI,YAAcC,QAAQC,QAAQ,CAACN,KAAMA,YACtClC,WAAWyC,eAAeH,kBAG1BtC,WAAWY,UAAUX,GAAG,SAAU,QAASI,IAC5CA,EAAEW,iBACE/B,KAAKyD,qBACAC,oBAUjBR,yBAAyBD,YACfI,YAAcC,QAAQC,QAAQ,CAACN,KAAMA,YACtClC,WAAWyC,eAAeH,wCAQ1BrD,KAAKyD,iDACOL,MAAM,mBAAoB,yCAA0C,SAKhFO,uBAICC,SADO5D,KAAKe,WAAWY,UAAUzB,KAAK,QACtB2D,uCAGLC,kBAAkB,CAC/BC,SAAUH,SACVI,KAAM,gBAETC,MAAMnB,WACCA,SAASK,YAEJH,eAAeF,SAASzC,UAAUC,cAClC4D,iBACGpB,SAASzB,KAAK8C,eAMjBjC,gBAAgBY,SAASzB,KAAK+C,gBAJ9BpB,eAAeF,SAASzB,KAAK4B,WAC7BiB,oBAMZG,OAAOhE,kCACSA,UAAUA,gBAClB6D,mBASbT,qBACUa,QAAUtE,KAAKe,WAAWY,UAAUzB,KAAK,wCAC3CoE,QAAQlE,SACRkE,QAAQC,QAAQC,SACT,GAQfb,sBACS5C,WAAWd,YAAYC,KAAK,iBAAiBuE,KAAK,YAAY,GAMvEP,qBACSnD,WAAWd,YAAYC,KAAK,iBAAiBwE,WAAW,iEAhNhD/E,mBACH,0BADGA,uBAEC,kDAFDA,qBAGD,CACZ8B,KAAM,oBACNQ,SAAU,0BA+MlBtC,YAAYgF"}